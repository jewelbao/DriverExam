package com.jewel.greendao.auto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jewel.model.ExamData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_DATA".
*/
public class ExamDataDao extends AbstractDao<ExamData, String> {

    public static final String TABLENAME = "EXAM_DATA";

    /**
     * Properties of entity ExamData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TikuType = new Property(1, String.class, "tikuType", false, "TIKU_TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property File = new Property(3, String.class, "file", false, "FILE");
        public final static Property A = new Property(4, String.class, "a", false, "A");
        public final static Property B = new Property(5, String.class, "b", false, "B");
        public final static Property C = new Property(6, String.class, "c", false, "C");
        public final static Property D = new Property(7, String.class, "d", false, "D");
        public final static Property Val = new Property(8, String.class, "val", false, "VAL");
        public final static Property ExplainText = new Property(9, String.class, "explainText", false, "EXPLAIN_TEXT");
        public final static Property Total = new Property(10, int.class, "total", false, "TOTAL");
    }


    public ExamDataDao(DaoConfig config) {
        super(config);
    }
    
    public ExamDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_DATA\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIKU_TYPE\" TEXT," + // 1: tikuType
                "\"TITLE\" TEXT," + // 2: title
                "\"FILE\" TEXT," + // 3: file
                "\"A\" TEXT," + // 4: a
                "\"B\" TEXT," + // 5: b
                "\"C\" TEXT," + // 6: c
                "\"D\" TEXT," + // 7: d
                "\"VAL\" TEXT," + // 8: val
                "\"EXPLAIN_TEXT\" TEXT," + // 9: explainText
                "\"TOTAL\" INTEGER NOT NULL );"); // 10: total
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tikuType = entity.getTikuType();
        if (tikuType != null) {
            stmt.bindString(2, tikuType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(4, file);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(5, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(6, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(7, c);
        }
 
        String d = entity.getD();
        if (d != null) {
            stmt.bindString(8, d);
        }
 
        String val = entity.getVal();
        if (val != null) {
            stmt.bindString(9, val);
        }
 
        String explainText = entity.getExplainText();
        if (explainText != null) {
            stmt.bindString(10, explainText);
        }
        stmt.bindLong(11, entity.getTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tikuType = entity.getTikuType();
        if (tikuType != null) {
            stmt.bindString(2, tikuType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(4, file);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(5, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(6, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(7, c);
        }
 
        String d = entity.getD();
        if (d != null) {
            stmt.bindString(8, d);
        }
 
        String val = entity.getVal();
        if (val != null) {
            stmt.bindString(9, val);
        }
 
        String explainText = entity.getExplainText();
        if (explainText != null) {
            stmt.bindString(10, explainText);
        }
        stmt.bindLong(11, entity.getTotal());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExamData readEntity(Cursor cursor, int offset) {
        ExamData entity = new ExamData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tikuType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // file
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // a
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // b
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // c
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // d
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // val
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // explainText
            cursor.getInt(offset + 10) // total
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTikuType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setA(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setB(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setD(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExplainText(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTotal(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExamData entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ExamData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
